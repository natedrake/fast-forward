<?php

namespace phparsenal\fastforward\Command;

use phparsenal\fastforward\Client;
use phparsenal\fastforward\Model\Setting;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Save and list settings
 */
class Set extends InteractiveCommand
{
    private $client;

    public function __construct(Client $client)
    {
        parent::__construct();
        $this->client = $client;
    }

    /**
     * Configures the current command.
     */
    protected function configure()
    {
        $this->setName('set')
            ->setDescription('Set or get variables')
            ->addOption('list', 'l', InputOption::VALUE_NONE, 'Show a list of all current settings.')
            ->addOption('import-file', 'f', InputOption::VALUE_REQUIRED, 'Import from the specified file or STDIN')
            ->addOption('import-stdin', 'i', InputOption::VALUE_NONE, 'Import setting via STDIN pipe')
            ->addArgument('key', InputArgument::OPTIONAL, 'Name or key of the setting')
            ->addArgument('value', InputArgument::OPTIONAL, 'Value to be set');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        if ($input->getOption('list')) {
            $this->listAll($output);
            return;
        }
        $importFile = $input->getOption('import-file');
        if ($importFile !== null) {
            $this->addLines($this->getLinesFile($importFile), $output);
            return;
        }
        if ($input->getOption('import-stdin')) {
            $this->addLines($this->getLinesStdin(), $output);
            return;
        }

        $key = $input->getArgument('key');
        $value = $input->getArgument('value');
        if ($key !== null) {
            if ($value !== null) {
                $this->client->set($key, $value);
            } else {
                $this->client->getSettings()->showSupportedSettings($key);
            }
        }
    }

    protected function interact(InputInterface $input, OutputInterface $output)
    {
        if ($input->getOption('list')
            || $input->getOption('import-stdin')
            || $input->getOption('import-file') !== null
        ) {
            return;
        }
        parent::interact($input, $output); // TODO: Change the autogenerated stub
    }

    /**
     * @param OutputInterface $output
     */
    public function listAll(OutputInterface $output)
    {
        $settings = Setting::select()->orderAsc('key')->all();
        foreach ($settings as $setting) {
            $output->writeln($setting->key . ' ' . $setting->value);
        }
    }

    /**
     * @return array
     */
    private function getLinesStdin()
    {
        $h = fopen('php://stdin', 'r');
        $lines = array();
        while (!feof($h)) {
            $lines[] = fgets($h);
        }
        fclose($h);
        return $lines;
    }

    /**
     * @param $filepath
     *
     * @return array
     *
     * @throws \Exception
     */
    private function getLinesFile($filepath)
    {
        if (!file_exists($filepath)) {
            throw new \RuntimeException("Could not find file '{$filepath}'");
        }
        $lines = file($filepath);
        return $lines;
    }

    /**
     * @param $lines
     * @param OutputInterface $output
     */
    private function addLines($lines, OutputInterface $output)
    {
        foreach ($lines as $line) {
            if (preg_match('/^([^ ]+) (.*)/', $line, $matches)) {
                $this->client->set($matches[1], $matches[2]);
            } elseif (trim($line) !== '') {
                $output->writeln('Line ignored: ' . $line);
            }
        }
    }
}
